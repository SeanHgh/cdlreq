name: Coverage Validation

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  coverage-validation:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov openpyxl

    - name: Run tests and capture output
      run: |
        echo "üß™ Running tests and capturing output for coverage analysis..."
        python -m pytest tests/ -v --tb=short > test_output.txt 2>&1 || true
        echo "üìã Test output captured to test_output.txt"
        echo ""
        echo "Test output preview (first 20 lines):"
        head -20 test_output.txt

    - name: Check test coverage using cdlreq coverage command
      id: coverage_check
      run: |
        echo "üîç Running cdlreq coverage analysis..."
        
        # Run the coverage command and capture both output and exit code
        if cdlreq coverage test_output.txt --directory . > coverage_output.txt 2>&1; then
          COVERAGE_EXIT_CODE=0
        else
          COVERAGE_EXIT_CODE=$?
        fi
        
        echo "Coverage analysis output:"
        cat coverage_output.txt
        echo ""
        
        # Check if there are any "Not executed" tests
        if grep -q "‚ùå Not executed:" coverage_output.txt; then
          echo "‚ùå COVERAGE CHECK FAILED: Some specification unit tests were not executed"
          echo "coverage_passed=false" >> $GITHUB_OUTPUT
          
          echo ""
          echo "üìã Summary of issues:"
          echo "The following unit test files from specifications were not executed:"
          grep -A 20 "‚ùå Not executed:" coverage_output.txt | grep "  " | head -10
        elif grep -q "‚ö†Ô∏è  Invalid test files" coverage_output.txt; then
          echo "‚ùå COVERAGE CHECK FAILED: Some specification unit test paths are invalid (files don't exist)"
          echo "coverage_passed=false" >> $GITHUB_OUTPUT
          
          echo ""
          echo "üìã Summary of issues:"
          echo "The following unit test files referenced in specifications don't exist:"
          grep -A 20 "‚ö†Ô∏è  Invalid test files" coverage_output.txt | grep "  " | head -10
        else
          echo "‚úÖ COVERAGE CHECK PASSED: All specification unit tests were executed"
          echo "coverage_passed=true" >> $GITHUB_OUTPUT
        fi
        
        exit $COVERAGE_EXIT_CODE

    - name: Comment on PR with coverage results
      if: failure() || success()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const coverageOutput = fs.readFileSync('coverage_output.txt', 'utf8');
          const testOutput = fs.readFileSync('test_output.txt', 'utf8');
          const coveragePassed = '${{ steps.coverage_check.outputs.coverage_passed }}' === 'true';
          
          const icon = coveragePassed ? '‚úÖ' : '‚ùå';
          const status = coveragePassed ? 'PASSED' : 'FAILED';
          const color = coveragePassed ? 'üü¢' : 'üî¥';
          
          let body = `## ${icon} Coverage Validation ${status}\n\n`;
          
          if (coveragePassed) {
            body += `${color} **All specification unit tests are properly covered!**\n\n`;
            body += `All unit test files referenced in your specifications were executed during testing.\n\n`;
          } else {
            body += `${color} **Coverage validation failed!**\n\n`;
            body += `Some unit test files referenced in your specifications were not executed or are invalid.\n\n`;
            body += `**This pull request cannot be merged until all specification unit tests are covered.**\n\n`;
          }
          
          body += `### üìä Coverage Analysis Results\n\n`;
          body += '```\n' + coverageOutput + '\n```\n\n';
          
          body += `<details>\n<summary>üß™ View Full Test Output</summary>\n\n`;
          body += '```\n' + testOutput.slice(-3000) + '\n```\n\n'; // Show last 3000 chars to avoid too long comments
          body += `</details>\n\n`;
          
          if (!coveragePassed) {
            body += `### üîß How to Fix\n\n`;
            body += `1. **For missing test files**: Create the missing test files referenced in your specifications\n`;
            body += `2. **For unexecuted tests**: Make sure your test files are properly named and discoverable by pytest\n`;
            body += `3. **Update specification paths**: Ensure unit_test paths in specifications point to existing files\n\n`;
            body += `Run locally: \`cdlreq coverage <test-output-file> --directory .\` to debug\n\n`;
          }
          
          // Find existing coverage comment and update it, or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Coverage Validation')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

    - name: Fail if coverage check failed
      if: steps.coverage_check.outputs.coverage_passed == 'false'
      run: |
        echo "‚ùå Coverage validation failed - blocking merge"
        echo "All specification unit test files must be executed before this PR can be merged"
        exit 1

  # Summary job for branch protection
  coverage-validation-summary:
    runs-on: ubuntu-latest
    needs: [coverage-validation]
    if: always()
    
    steps:
    - name: Check coverage validation status
      run: |
        if [[ "${{ needs.coverage-validation.result }}" == "success" ]]; then
          echo "‚úÖ Coverage validation passed - all specification unit tests are covered!"
          exit 0
        else
          echo "‚ùå Coverage validation failed - some specification unit tests are not covered"
          exit 1
        fi